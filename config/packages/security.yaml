security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_user_provider:
            entity:
                class: App\Entity\User
                property: username
        users_in_memory:
            memory:
                users:
                    # username: { password: ..., roles: [..., ...]}
                    user: { password: "$2y$13$tCzUVQXyqo48KmyYr2nsTehpSCWvrmnaLWsSEm8EeqKZStIfPSSJW", roles: ['ROLE_MEMORY_USER'] }
                    admin: { password: "$2y$13$o69URtfMNGWDUL9Wt5fRYuukQ38oB7/BcvJ3TvGpAzghwtmLRyx02", roles: ['ROLE_ADMIN'] }
                    superadmin: { password: "$2y$13$o69URtfMNGWDUL9Wt5fRYuukQ38oB7/BcvJ3TvGpAzghwtmLRyx02", roles: ['ROLE_SUPER_ADMIN'] }
        all_users:
            chain:
                providers: [ 'app_user_provider', 'users_in_memory' ]
    role_hierarchy:
        ROLE_MEMORY_USER: [ROLE_USER]
        ROLE_SUPER_ADMIN: [ROLE_USER]
        ROLE_ADMIN: [ROLE_USER]

    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false
        main:
            lazy: true
            provider: all_users

            form_login:
                login_path: authentication_login
                check_path: authentication_login
                enable_csrf: true
            logout:
                path: authentication_logout

            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/connexion$, roles: PUBLIC_ACCESS }
        - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
